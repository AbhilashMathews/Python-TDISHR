import numpy as _np,copy as _copy
import mdsdata as _data
import _mdsdtypes as _dtypes

def makeScalar(value):
    if isinstance(value,str):
        return String(value)
    if isinstance(value,Scalar):
        return _copy.deepcopy(value)
    if isinstance(value,_np.generic):
        if isinstance(value,_np.string_):
            return String(value)
        try:
            if isinstance(value,_np.bytes_):
              return String(str(value,encoding='utf8'))
        except:
            pass
        if isinstance(value,_np.bool_):
            return makeScalar(int(value))
        return Scalar.numpyToClass[type(value)](value)
    if 'long' in dir(__builtins__) and isinstance(value,long):
        try:
            return Int64(value)
        except:
            return Uint64(value)
    if isinstance(value,int):
        try:
            return Int32(value)
        except:
            return Uint32(value)
    if isinstance(value,float):
        try:
            return Float32(value)
        except:
            return Float64(value)
    if isinstance(value,str):
        return String(value)
    if isinstance(value,bytes):
        return String(value.decode())
    if isinstance(value,bool):
        return Uint8(int(value))
    if isinstance(value,complex):
        return Complex128(_np.complex128(value))
    if isinstance(value,_np.complex64):
        return Complex64(value)
    if isinstance(value,_np.complex128):
        return Complex128(value)
    raise TypeError('Cannot make Scalar out of '+str(type(value)))

class Scalar(_data.Data):
    mdsdtype=None
    mdsclass=1
    numpyToClass=dict()
   
    def __new__(cls,value=0):
        try:
            import mdsarray as _array  ### delayed import needed
            if (isinstance(value,_array.Array)) or isinstance(value,list) or isinstance(value,_np.ndarray):
               return _array.__dict__[cls.__name__+'Array'](value)
        except:
            pass

        return super(Scalar,cls).__new__(cls)
        
    def __init__(self,value=0):
        if self.__class__.__name__ == 'Scalar':
            raise TypeError("cannot create 'Scalar' instances")
        if self.__class__.__name__ == 'String':
            self._value=_np.string_(value)
            return
        if isinstance(value,Scalar):
            value=value._value
        self._value=self.numpydtype(value)

    def __getattr__(self,name):
        return self._value.__getattribute__(name)

    def _getValue(self):
        """Return the numpy scalar representation of the scalar"""
        return self._value
    value=property(_getValue)

    def __str__(self):
        formats={'Int8':'%dB','Int16':'%dW','Int32':'%d','Int64':'0X%0xQ',
                 'Uint8':'%uBU','Uint16':'%uWU','Uint32':'%uLU','Uint64':'0X%0xQU',
                 'Float32':'%g'}
        ans=formats[self.__class__.__name__] % (self._value,)
        if ans=='nan':
            ans="$ROPRAND"
        elif isinstance(self,Float32) and ans.find('.')==-1:
            ans=ans+"."
        return self._decompile_units_and_error(ans)

    def decompile(self):
        return _data.makeData(str(self))

    def __int__(self):
        """Integer: x.__int__() <==> int(x)
        @rtype: int"""
        return self._value.__int__()

    def __long__(self):
        """Long: x.__long__() <==> long(x)
        @rtype: int"""
        return self.__value.__long__()

    def _unop(self,op):
        return _data.makeData(getattr(self.value,op)())

    def _binop(self,op,y):
        try:
            y=y.value
        except AttributeError:
            pass
        ans=getattr(self.value,op)(y)
        return _data.makeData(ans)

    def _triop(self,op,y,z):
        try:
            y=y.value
        except AttributeError:
            pass
        try:
            z=z.value
        except AttributeError:
            pass
        return _data.makeData(getattr(self.value,op)(y,z))

    def all(self):
        return self._unop('all')

    def any(self):
        return self._unop('any')

    def argmax(self,*axis):
        if axis:
            return self._binop('argmax',axis[0])
        else:
            return self._unop('argmax')

    def argmin(self,*axis):
        if axis:
            return self._binop('argmin',axis[0])
        else:
            return self._unop('argmin')

    def argsort(self,axis=-1,kind='quicksort',order=None):
        return _data.makeData(self.value.argsort(axis,kind,order))

    def astype(self,type):
        return _data.makeData(self.value.astype(type))

    def byteswap(self):
        return self._unop('byteswap')

    def clip(self,y,z):
        return self._triop('clip',y,z)


def _scalar_decorator(klass):
    klass.numpyToClass[klass.numpydtype]=klass
    return klass

#@_scalar_decorator
class Int8(Scalar):
    """8-bit signed number"""
    mdsdtype=_dtypes.DTYPE_B
    numpydtype=_np.int8
Int8=_scalar_decorator(Int8)

#@_scalar_decorator
class Int16(Scalar):
    """16-bit signed number"""
    mdsdtype=_dtypes.DTYPE_W
    numpydtype=_np.int16
Int16=_scalar_decorator(Int16)

#@_scalar_decorator
class Int32(Scalar):
    """32-bit signed number"""
    mdsdtype=_dtypes.DTYPE_L
    numpydtype=_np.int32
Int32=_scalar_decorator(Int32)

#@_scalar_decorator
class Int64(Scalar):
    """64-bit signed number"""
    mdsdtype=_dtypes.DTYPE_Q
    numpydtype=_np.int64
Int64=_scalar_decorator(Int64)

#@_scalar_decorator
class Uint8(Scalar):
    """8-bit unsigned number"""
    mdsdtype=_dtypes.DTYPE_BU
    numpydtype=_np.uint8
Uint8=_scalar_decorator(Uint8)

#@_scalar_decorator
class Uint16(Scalar):
    """16-bit unsigned number"""
    mdsdtype=_dtypes.DTYPE_WU
    numpydtype=_np.uint16
Uint16=_scalar_decorator(Uint16)

#@_scalar_decorator
class Uint32(Scalar):
    """32-bit unsigned number"""
    mdsdtype=_dtypes.DTYPE_LU
    numpydtype=_np.uint32
Uint32=_scalar_decorator(Uint32)

#@_scalar_decorator
class Uint64(Scalar):
    """64-bit unsigned number"""
    mdsdtype=_dtypes.DTYPE_QU
    numpydtype=_np.uint64

    def _getDate(self):
        import builtins as _builtins
        return _builtins.DATE_TIME(self).evaluate()
    date=property(_getDate)
Uint64=_scalar_decorator(Uint64)

#@_scalar_decorator
class Float32(Scalar):
    """32-bit floating point number"""
    mdsdtype=_dtypes.DTYPE_FS
    numpydtype=_np.float32
Float32=_scalar_decorator(Float32)

#@_scalar_decorator
class Complex64(Scalar):
    """32-bit complex number"""
    mdsdtype=_dtypes.DTYPE_FSC
    numpydtype=_np.complex64
    def __str__(self):
        return "Cmplx(%g,%g)" % (self._value.real,self._value.imag)
Complex64=_scalar_decorator(Complex64)

#@_scalar_decorator
class Float64(Scalar):
    """64-bit floating point number"""
    mdsdtype=_dtypes.DTYPE_FT
    numpydtype=_np.float64
    def __str__(self):
        return ("%E" % self._value).replace("E","D")
Float64=_scalar_decorator(Float64)

#@_scalar_decorator
class Complex128(Scalar):
    mdsdtype=_dtypes.DTYPE_FTC
    numpydtype=_np.complex128
    """64-bit complex number"""
    def __str__(self):
        return "Cmplx(%s,%s)" % (str(Float64(self._value.real)),str(Float64(self._value.imag)))
Complex128=_scalar_decorator(Complex128)

#@_scalar_decorator
class String(Scalar):
    """String"""
    mdsdtype=_dtypes.DTYPE_T
    numpydtype=_np.string_
    def __radd__(self,y):
        """Reverse add: x.__radd__(y) <==> y+x
        @rtype: Data"""
        return self.execute('$//$',y,self)
    def __add__(self,y):
        """Add: x.__add__(y) <==> x+y
        @rtype: Data"""
        return self.execute('$//$',self,y)
    def __str__(self):
        """String: x.__str__() <==> str(x)
        @rtype: String"""
        if len(self._value) > 0:
            ans = str(self.value.tostring().decode())
        else:
            ans = ''
        return self._decompile_units_and_error(ans,True)

    def __len__(self):
        return len(str(self))

    def decompile(self):
        return _data.makeData(repr(self))

    def __repr__(self):
        return repr(str(self))
String=_scalar_decorator(String)

#class Int128(Scalar):
#    """128-bit number"""
#    def __init__(self):
#        raise TypeError("Int128 is not yet supported")
#
#class Uint128(Scalar):
#    """128-bit unsigned number"""
#    def __init__(self):
#        raise TypeError("Uint128 is not yet supported")
